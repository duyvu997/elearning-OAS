---
openapi: "3.0.0"
info:
  title: "Swagger Orange Juice"
  version: "1.0.0"
  description: "This is a APIs of Orange-Juice e-learning server."
servers:
  - url: https://orange-juice.edu.com/v1/
    description: Optional server development description
tags:
  - name: "User"
  - name: "Course"
  - name: "Quiz"
paths:
  /users:
    get:
      tags:
        - "User"
      summary: "Get user's information"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Bad request"
        404:
          description: "Not found"
      security:
        - bearerAuth: []
    put:
      tags:
        - "User"
      summary: "Update user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      parameters:
        - in: "path"
          name: "username"
          schema: 
            type: "string"
          description: "name that need to be updated"
          required: true
      requestBody: 
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: "Updated user object"
        required: true
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
      security:
        - bearerAuth: []
    delete:
      tags:
        - "User"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      parameters:
        - in: "path"
          name: "username"
          schema: 
            type: "string"
          description: "The name that needs to be deleted"
          required: true
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      security:
        - bearerAuth: []
    post:
      tags:
        - "User"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      requestBody: 
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

        description: "Created user"
        required: true
      responses:
        default:
          description: "successful operation"
  /users/login:
    post:
      tags:
        - "User"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      requestBody: 
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"

        description: "Login user input"
        required: true
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        400:
          description: "Invalid username/password supplied"
  /users/logout:
    post:
      tags:
        - "User"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      parameters: []
      responses:
        default:
          description: "successful operation"
      deprecated: true
  /courses:
    get:
      tags:
      - "Course"
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - in: query
          name: by-user
          schema: 
            type: boolean
          required: false
          description: "Get user name in token then find all courses of user."
        - in: query
          name: popular
          schema: 
            type: boolean
          required: false
          description: "Get courses with tag popular."
        - in: query
          name: newest
          schema: 
            type: boolean
          required: false
          description: "Get courses with tag newest"
          
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoursesResponse"
        400:
          description: "Bad request"
        404:
          description: "Courses not found"
  /courses/{courseId}:
    get: 
      tags:
      - "Course"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseDetails"
        400:
          description: "Bad request"
        404:
          description: "Courses not found"
  /courses/{courseId}/lessons/{lessonId}:
    get:
      tags: 
        - "Course"
      responses:
          200:
            description: "successful operation"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/LessonDetails"
          400:
            description: "Bad request"
          404:
            description: "Courses not found"
    

components:
  schemas:
    ApiResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        message:
          type: "string"
    User:
      $ref: './components/schema/user.yml#/User' 
    Course:
      type: "object"
      properties:
        name:
          type: "string"
        duration:
          type: "string"
        members:
          type: "integer"
          format: "int32"
        authors:
          type: "string"
        courseImageUrl:
          type: "string"
    GeneralCourse:
      allOf:
        - $ref: '#/components/schemas/Course'
        - type: object
          properties:
            userCourseStatus:
              type: "string"
              enum: [NOT_REGISTER, PENDING]
              description: >
                Explanations: <br>
                * `NOT_REGISTER` - user not register this course yet. <br>
                * `PENDING` - user is waiting for approval to join this course.
          example: 
            name: Ngữ Văn 6
            author: Ms Vy Thuy
            userCourseStatus: NOT_REGISTER 
            duration: 6h 30min # duration in min 
            members: 49 # duration in min 
            courseImageUrl: https://orange-juice.com/uploads/2017/06/gg-1.jpg
    PersonalCourse:
      allOf:
        - $ref: '#/components/schemas/Course'
        - type: object
          properties:
            userCourseProcess:
              type: integer
              maximum: 100
              minimum: 0
          example: 
            name: Ngữ Văn 6
            author: "Ms Vy Thuy"
            userCourseProcess: 83
            courseImageUrl: https://orange-juice.com/uploads/2017/06/gg-1.jpg
    CoursesResponseItem:
      type: object
      properties: 
        tagName:
          type: string # enum:  by-user | popular | newest | all
        result:
          type: array
          items:
            oneOf: 
              - $ref: '#/components/schemas/GeneralCourse'
              - $ref: '#/components/schemas/PersonalCourse'
    CoursesResponse:
      type: array
      items:
        $ref: '#components/schemas/CoursesResponseItem'
      example:
        [
          {
            tagName: popular,
            result: []
          },
          {
            tagName: newest,
            result: []
          },
          {
            tagName: by-user,
            result: []
          }, 
          {
            tagName: all,
            result: []
          },
        ] 
    Lesson: 
      type: object
      properties:
        id: 
          type: string
        name:
          type: string
        lessonImageUrl:
          type: string
        lessonDesc:
          type: string
        status: 
          type: string
          enum: [DONE, LEARNING, LOCKED]
    LessonDetails:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        lessonDesc:
          type: string 
        resources:
          type: array
          items: 
            $ref: '#/components/schemas/LessonResource'
        quizes:
          type: array
          items:
            $ref: '#/components/schemas/Quiz'
    Quiz:
      type: object
      properties:
        name:
          type: string
    LessonResource:
      type: object
      properties:
        name:
          type: string
    CourseDetails: 
        type: object
        properties: 
          id:
            type: number
          name:
            type: string
          title:
            type: string
          description:
            type: string
          lessons:
            type: array
            items: 
              $ref: '#/components/schemas/Lesson'
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwidXNlcm5hbWUiOiJqb2huMDkwOSIsImlhdCI6MTUxNjIzOTAyMn0.aj5KcumubmGe3Twtm7vLWbe7Ljt806Hj_OmqVsbjGVU'
          Please decode for more information: using https://jwt.io/"
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

  parameters:
    offset:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
      description: The number of items to skip before starting to collect the result set.
    limit:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 5
      description: The numbers of items to return.

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
externalDocs:
  description: "More details"
  url: "http://swagger.io"
